If Exists(Select [Name] from Sysobjects where xType='P' and Id=Object_Id(N'USP_REP_STKVAL_DETAIL'))
Begin
	Drop Procedure USP_REP_STKVAL_DETAIL
End

set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON
go

-- =============================================
-- Author:	Shrikant S.
-- Create date: 05/05/2016
-- Description:	This Stored procedure is useful to generate INVENTORY STOCK VALUATION Report.
-- Remark:
-- =============================================
Create PROCEDURE [dbo].[USP_REP_STKVAL_DETAIL]
@TMPAC NVARCHAR(50),@TMPIT NVARCHAR(50),@SPLCOND VARCHAR(8000),@SDATE  SMALLDATETIME,@EDATE SMALLDATETIME
,@SAC AS VARCHAR(60),@EAC AS VARCHAR(60)
,@SIT AS VARCHAR(60),@EIT AS VARCHAR(60)
,@SAMT FLOAT,@EAMT FLOAT
,@SDEPT AS VARCHAR(60),@EDEPT AS VARCHAR(60)
,@SCATE AS VARCHAR(60),@ECATE AS VARCHAR(60)
,@SWARE AS VARCHAR(60),@EWARE AS VARCHAR(60)
,@SINV_SR AS VARCHAR(60),@EINV_SR AS VARCHAR(60)
,@LYN VARCHAR(20)
,@EXPARA  AS VARCHAR(4000) --= null	--Bug20309
AS

DECLARE @FCON AS NVARCHAR(2000),@VSAMT DECIMAL(14,4),@VEAMT DECIMAL(14,4)

select top 1 sta_dt into #TempSta_dt from vudyog..co_mast where dbname = db_name() and sta_dt <=@sdate order by sta_dt desc			

Declare @ExclDutyforDealer Bit	
set @ExclDutyforDealer = 0	
select top 1 @ExclDutyforDealer = ExclDutyforDealer from Manufact	

EXECUTE   USP_REP_FILTCON 
@VTMPAC =@TMPAC,@VTMPIT =@TMPIT,@VSPLCOND =@SPLCOND
,@VSDATE=NULL
,@VEDATE=NULL--@EDATE
,@VSAC =@SAC,@VEAC =@EAC
,@VSIT=@SIT,@VEIT=@EIT
,@VSAMT=@SAMT,@VEAMT=@EAMT
,@VSDEPT=@SDEPT,@VEDEPT=@EDEPT
,@VSCATE =@SCATE,@VECATE =@ECATE
,@VSWARE =@SWARE,@VEWARE  =@EWARE
,@VSINV_SR =@SINV_SR,@VEINV_SR =@SINV_SR
,@VMAINFILE='M',@VITFILE='I',@VACFILE=' '
,@VDTFLD ='DATE'
,@VLYN=Null
,@VEXPARA=null
,@VFCON =@FCON OUTPUT

--Bug20309
Declare @SQLCOMMAND AS NVARCHAR(4000),@ShowNil Varchar(100),@FldNmLst Varchar(4000),@FldValLst Varchar(4000),@CondCount Int
Set @ShowNil = case when @EXPARA like '%YES%' then 'YES' else 'NO' end

Select RecId = IDENTITY(int, 1,1),VStkCond = Cast(' ' as varchar(4000)),* 
	into ##STKVALConfig from StkValConfig

SELECT RecId=Cast(0 as int),
	RawId=Cast(0 as int),
	condition=Cast(' ' as nvarchar(max)),
	descrip=Cast(' ' as nvarchar(max)),
	tbl_name=Cast(' ' as nvarchar(max))
	Into #StkValConfig1 FROM ##StkValConfig where 1 = 2

--SET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT On
SET ARITHABORT On
Set @CondCount = 1
WHILE 1 = 1
BEGIN
	Set @SQLCOMMAND	= 'Insert into #StkValConfig1
		SELECT RecId,'+cast(@CondCount as varchar(5))+',
		vcond.value(''(//tmpvcond/condition)['+cast(@CondCount as varchar(5))+']'', ''nvarchar(max)'') as condition,
		vcond.value(''(//tmpvcond/descrip)['+cast(@CondCount as varchar(5))+']'', ''nvarchar(max)'') as descrip,
		vcond.value(''(//tmpvcond/tbl_name)['+cast(@CondCount as varchar(5))+']'', ''nvarchar(max)'') as tbl_name
		FROM ##StkValConfig'
	EXEC SP_EXECUTESQL  @SQLCOMMAND	
		
	IF Not Exists(Select * from #StkValConfig1 where RawId = @CondCount And condition Is Not Null)
		BREAK
	ELSE
		Set @CondCount = @CondCount + 1
		CONTINUE
END

Update #StkValConfig1 Set condition = ISNULL(condition,''),descrip = ISNULL(descrip,''),tbl_name = ISNULL(tbl_name,'')
Delete from #StkValConfig1 Where condition = '' and descrip = '' and tbl_name = ''
Update #StkValConfig1 Set tbl_name = (case when tbl_name = 'STKL_VW_MAIN' then 'M' else (case when tbl_name = 'STKL_VW_ITEM' then 'I' else tbl_name end) end)

Set @FldNmLst = '[RULE],[INV_NO],[ENTRY_TY],[PMKEY],[IT_NAME],[WARE_NM],[ITSERIAL],[DC_NO]'
Set @FldValLst = 'M.[RULE],M.[INV_NO],M.[ENTRY_TY],I.[PMKEY],IT_MAST.[IT_NAME],I.[WARE_NM],I.[ITSERIAL],[DC_NO]'

Declare @recid int,@condition Varchar(100),@descrip Varchar(4000),@tbl_name Varchar(100),@stkvcond Varchar(4000)
DECLARE C0STKVAL CURSOR FOR 
SELECT RecId FROM #StkValConfig1 Group BY RecId
OPEN C0STKVAL
FETCH NEXT FROM C0STKVAL INTO @recid
WHILE @@FETCH_STATUS=0
	BEGIN
	Set @stkvcond = ''

	DECLARE C01STKVAL CURSOR FOR 
	SELECT Condition,Descrip,Tbl_Name FROM #StkValConfig1 Where RecId = @recid
	ORDER BY RecId,Tbl_Name,Condition
	OPEN C01STKVAL
	FETCH NEXT FROM C01STKVAL INTO @Condition,@Descrip,@Tbl_Name
	WHILE @@FETCH_STATUS=0
	BEGIN
			
		IF replace(replace(@FldValLst,'[','+'),']','+') not like '%'+'+'+LTRIM(RTRIM(@Condition))+'+'+'%'
		Begin
			Set @FldNmLst = @FldNmLst + ','+'['+LTRIM(RTRIM(@Condition))+']'
			Set @FldValLst = @FldValLst + ','+LTRIM(RTRIM(@Tbl_Name))+'.['+LTRIM(RTRIM(@Condition))+']'
		End

		if replace(replace(@stkvcond,'[','+'),']','+') like '%'+'+'+LTRIM(RTRIM(@Condition))+'+'+'%'
		Begin
			Set @stkvcond = @stkvcond + ' Or '
		End	
		if replace(replace(@stkvcond,'[','+'),']','+') not like '%'+'+'+LTRIM(RTRIM(@Condition))+'+'+'%'
		Begin
			if @stkvcond <> ''
			Begin
				Set @stkvcond = @stkvcond + ' ) And '
			End	
			Set @stkvcond = @stkvcond + ' ( '
		End	
		Set @stkvcond = @stkvcond + '['+LTRIM(RTRIM(@Condition))+']' 
		Set @stkvcond = @stkvcond + ' = '''+@Descrip+''''
		
		FETCH NEXT FROM C01STKVAL INTO @Condition,@Descrip,@Tbl_Name
	END
	CLOSE C01STKVAL
	DEALLOCATE C01STKVAL

	if @stkvcond <> ''
	Begin
		Set @stkvcond = @stkvcond + ' )'
	End	
	Set @stkvcond = REPLACE(@stkvcond,'''','''''')
	SET @SQLCOMMAND=' '
	SET @SQLCOMMAND=' Update ##STKVALConfig Set VStkCond = '''+@stkvcond+''' Where RecId = '+cast(@RecId as varchar(5))
	print @SQLCOMMAND
	EXEC SP_EXECUTESQL  @SQLCOMMAND

	FETCH NEXT FROM C0STKVAL INTO @recid
END
CLOSE C0STKVAL
DEALLOCATE C0STKVAL

Drop Table #StkValConfig1

SET @SQLCOMMAND=' '
SET @SQLCOMMAND='SELECT IT_CODE,IT_NAME=ITEM,OPBAL=QTY,OPAMT=GRO_AMT,RQTY=QTY,RAMT=GRO_AMT,IQTY=QTY,IAMT=GRO_AMT,CLBAL=QTY,CLAMT=GRO_AMT,Ware_Nm,DC_NO,Status=Ware_Nm,VNAME=SPACE(100),stkYear=Year(Date),stkMonth=Month(Date),stkMonthNm=Space(15) INTO ##STKVAL FROM STITEM WHERE 1=2'
EXEC SP_EXECUTESQL  @SQLCOMMAND
	
SET @SQLCOMMAND=' '
SET @SQLCOMMAND='SELECT M.DATE,TRAN_CD=0,I.IT_CODE,I.QTY,RATE=convert(Numeric(22,6),I.RATE),I.GRO_AMT,IT_MAST.RATEPER,MGRO_AMT=M.GRO_AMT,M.NET_AMT,FRATE=convert(Numeric(22,6),I.RATE),PMV=M.NET_AMT'
SET @SQLCOMMAND=@SQLCOMMAND + ',PMI=M.NET_AMT,TOTPMV=M.NET_AMT,BHENT=SPACE(2),PMKEY1=3,SRATE=convert(Numeric(22,6),I.RATE)'
SET @SQLCOMMAND=@SQLCOMMAND + ','+@FldValLst+',VName=space(100),VType=space(20)'
SET @SQLCOMMAND=@SQLCOMMAND + ' INTO ##STKVAL1 FROM STITEM I INNER JOIN STMAIN M ON(M.tran_cd=I.tran_cd)'
SET @SQLCOMMAND=@SQLCOMMAND + ' INNER JOIN IT_MAST ON(I.IT_CODE=IT_MAST.IT_CODE) WHERE 1=2'
EXEC SP_EXECUTESQL  @SQLCOMMAND



----->Generate #l Table from LCODE with Behaviour
SELECT DISTINCT ENTRY_TY,(CASE WHEN EXT_VOU=1 THEN BCODE_NM ELSE ENTRY_TY END) AS BHENT,PMKEY=INV_STK  INTO #L FROM LCODE WHERE (V_ITEM<>0 ) AND INV_STK<>' '  ORDER BY BHENT
---<--Generate #l Table from LCODE with Behaviour

----->Tax/Discount & Charges for applied Date. 
SELECT  DISTINCT A.ENTRY_TY,A.FLD_NM,A.ATT_FILE,A_S=(CASE WHEN (A.CODE='D' OR A.CODE='F') THEN '-' ELSE '+' END),A.STKVAL,A.WEFSTKFROM,A.WEFSTKTO,TAX_NAME=SPACE(20),L.BHENT
INTO #TAX
FROM DCMAST A INNER JOIN #L L ON (A.ENTRY_TY=L.ENTRY_TY) WHERE A.STKVAL<>0
UNION
SELECT DISTINCT ENTRY_TY,FLD_NM='TAXAMT   ',ATT_FILE=1,A_S='+',STKVAL,WEFSTKFROM,WEFSTKTO,TAX_NAME,BHENT=ENTRY_TY  
FROM STAX_MAS  
WHERE STKVAL<>0
---<--Tax/Discount & Charges for applied Date. 

SELECT  DISTINCT A.ENTRY_TY,A.FLD_NM,A.ATT_FILE,A_S='-',A.STKVAL,A.WEFSTKFROM,A.WEFSTKTO,TAX_NAME=SPACE(20),L.BHENT
INTO #TAXEXCL
FROM DCMAST A INNER JOIN #L L ON (A.ENTRY_TY=L.ENTRY_TY) WHERE A.STKVAL=0 And A.Code = 'E' And @ExclDutyforDealer = 1

----->Insert Records into ##STKVAL1 from all Item Tables
DECLARE @ENTRY_TY AS VARCHAR(2),@TRAN_CD INT,@BHENT AS VARCHAR(2),@ITSERIAL VARCHAR(10),@DATE SMALLDATETIME,@QTY NUMERIC(15,3),@AQTY NUMERIC(15,3),@AQTY1 NUMERIC(15,3),@IBALQTY1 NUMERIC(15,3),@QTY1 NUMERIC(15,3),@PMKEY VARCHAR(1)
DECLARE @ENTRY_TY1 AS VARCHAR(2),@TRAN_CD1 INT,@ITSERIAL1 VARCHAR(10),@WARE_NM1 VARCHAR(100),@DATE1 SMALLDATETIME,@IT_CODE1 INT,@DC_NO VARCHAR(10), @DC_NO1 VARCHAR(10),@VNAME1 VARCHAR(100)	
DECLARE @RATE NUMERIC(22,6),@RATE1 NUMERIC(22,6),@FRATE NUMERIC(22,6),@LRATE NUMERIC(22,6),@IT_CODE INT,@MIT_CODE INT,@IT_NAME VARCHAR(100),@WARE_NM VARCHAR(100),@MWARE_NM VARCHAR(100),@MVNAME VARCHAR(100)			
DECLARE @SRATE NUMERIC(22,6)

DECLARE  C1STKVAL CURSOR FOR 
SELECT  DISTINCT BHENT,PMKEY FROM #L
ORDER BY BHENT
OPEN C1STKVAL
FETCH NEXT FROM C1STKVAL INTO @BHENT,@PMKEY
WHILE @@FETCH_STATUS=0
BEGIN
	SET @SQLCOMMAND=' '
	SET @SQLCOMMAND=RTRIM(@SQLCOMMAND)+' '+'INSERT INTO ##STKVAL1 ('

	SET @SQLCOMMAND=RTRIM(@SQLCOMMAND)+' '+'DATE,TRAN_CD,IT_CODE,QTY,RATE,GRO_AMT,RATEPER,MGRO_AMT,NET_AMT,FRATE,PMV,PMI,TOTPMV'
	SET @SQLCOMMAND=RTRIM(@SQLCOMMAND)+' '+',BHENT,PMKEY1,SRATE,'+@FldNmLst
	SET @SQLCOMMAND=RTRIM(@SQLCOMMAND)+' '+')'

	SET @SQLCOMMAND=RTRIM(@SQLCOMMAND)+' '+'SELECT M.DATE,M.TRAN_CD,I.IT_CODE,I.QTY,I.RATE,I.GRO_AMT,IT_MAST.RATEPER,MGRO_AMT=M.GRO_AMT,M.NET_AMT,FRATE=0,PMV=0,PMI=0,TOTPMV=0'
	SET @SQLCOMMAND=RTRIM(@SQLCOMMAND)+' '+',L.BHENT,PMKEY1=(CASE WHEN I.PMKEY='+CHAR(39)+'+'+CHAR(39)+' THEN 1 ELSE 0 END),SRATE=0,'+@FldValLst	
	SET @SQLCOMMAND=RTRIM(@SQLCOMMAND)+' '+' FROM '+@BHENT+'ITEM I INNER JOIN '
	--Bug20309
	SET @SQLCOMMAND=RTRIM(@SQLCOMMAND)+' '+@BHENT+'MAIN M ON(M.tran_cd=I.tran_cd) '
	SET @SQLCOMMAND=RTRIM(@SQLCOMMAND)+' '+'INNER JOIN IT_MAST  ON(I.IT_CODE=IT_MAST.IT_CODE)'
	SET @SQLCOMMAND=RTRIM(@SQLCOMMAND)+' '+' AND IT_MAST.IN_STKVAL=1'
	SET @SQLCOMMAND=RTRIM(@SQLCOMMAND)+' '+'INNER JOIN #L L ON (M.ENTRY_TY=L.ENTRY_TY)'

	SET @SQLCOMMAND=RTRIM(@SQLCOMMAND)+' '+RTRIM(@FCON)
	SET @SQLCOMMAND=RTRIM(@SQLCOMMAND)+' '+' AND M.APGEN=''YES'' AND I.PMKEY<>'+''' ''' 
	PRINT @SQLCOMMAND
	EXEC SP_EXECUTESQL  @SQLCOMMAND
		
	FETCH NEXT FROM C1STKVAL INTO @BHENT,@PMKEY
END
CLOSE C1STKVAL
DEALLOCATE C1STKVAL


Update ##STKVAL1 Set VName = ISNULL(VName,''),VType = ISNULL(VType,'')
Declare @VName Varchar(100),@VType Varchar(20),@VCond Varchar(4000)
DECLARE C4STKVAL CURSOR FOR 
SELECT  VName,VType,VStkCond FROM ##STKVALConfig
ORDER BY VName
OPEN C4STKVAL
FETCH NEXT FROM C4STKVAL INTO @VName,@VType,@VCond
WHILE @@FETCH_STATUS=0
BEGIN
	If @VCond = ''
	begin
		set @VCond = 'IsNull(VName,'' '') = '' '''
	end
	SET @SQLCOMMAND=' '
	SET @SQLCOMMAND=' Update ##STKVAL1 Set VName = '''+@VName+''',VType = '''+@VType+''' Where '+@VCond
	EXEC SP_EXECUTESQL  @SQLCOMMAND
		
	FETCH NEXT FROM C4STKVAL INTO @VName,@VType,@VCond
END
CLOSE C4STKVAL
DEALLOCATE C4STKVAL


SELECT *,ASSEAMT=QTY * RATE INTO #RECEIPT FROM ##STKVAL1 WHERE PMKEY1=1 
SELECT *,ASSEAMT=QTY * RATE INTO #ISSUE FROM ##STKVAL1 WHERE PMKEY1<>1 

DELETE FROM ##STKVAL1 WHERE DATE>@EDATE		 

Update ##STKVAL1 set [Rule] = 'EXCISE' where [Rule] in ('EXCISE','NON-EXCISE')
Update ##STKVAL1 set [Rule] = 'OTHERS' where [Rule] NOT in ('EXCISE')
SET @SQLCOMMAND=' '
SET @SQLCOMMAND = 'DECLARE @OPTRAN_CD as INT,@OPDATE as DATETIME,@OPIT_CODE as INT,@OPRULE as VARCHAR(10),@OPVNAME as VARCHAR(100)		
	DECLARE openingentry_cursor CURSOR FOR
	SELECT A.TRAN_CD, B.STA_DT,A.IT_CODE,A.[RULE],A.VNAME FROM ##STKVAL1 A,#TempSta_dt B WHERE A.BHENT IN (''OS'') 		
	OPEN openingentry_cursor
	FETCH NEXT FROM openingentry_cursor into @OPTRAN_CD,@OPDATE,@OPIT_CODE,@OPRULE,@OPVNAME		
	WHILE @@FETCH_STATUS = 0
	BEGIN
	   DELETE FROM ##STKVAL1 WHERE DATE < @OPDATE AND [RULE] = @OPRULE AND VNAME	= @OPVNAME	
		AND IT_CODE IN (SELECT IT_CODE FROM ##STKVAL1 WHERE IT_CODE = @OPIT_CODE AND [RULE] = @OPRULE AND VNAME	= @OPVNAME AND BHENT IN (''OS'')  And DATE = @OPDATE)		--Changes done by vasant on 05/05/2012 as per Bug 3450 (Balance sheet report Problem).	
	   FETCH NEXT FROM openingentry_cursor into @OPTRAN_CD,@OPDATE,@OPIT_CODE,@OPRULE,@OPVNAME		
	END
CLOSE openingentry_cursor
DEALLOCATE openingentry_cursor'
EXECUTE SP_EXECUTESQL @SQLCOMMAND

DELETE FROM ##STKVAL1 WHERE ((PMKEY1=0 AND LEN(RTRIM(DC_NO))>=2))

---<--Insert Records into ##STKVAL1 from all Item Tables


----->Update PMI=Total Item wise plus/minus amount from dcmast,stax_mas,TOTPMV=Total Voucher wise plus/minus amount from dcmast,stax_mas into ##STKVAL1 from all Item Tables
DECLARE @TENTRY_TY AS VARCHAR(2),@FLD_NM AS VARCHAR(20),@ATT_FILE AS INT,@A_S AS VARCHAR(1),@WEFSTKFROM AS SMALLDATETIME,@WEFSTKTO AS SMALLDATETIME,@TBHENT AS VARCHAR(2),@TAX_NAME AS VARCHAR(30)
DECLARE @PARMDEFINATION NVARCHAR(50),@AMT AS NUMERIC(12,2)
UPDATE #RECEIPT SET PMI=0

SELECT ENTRY_TY,TRAN_CD=0,ITSERIAL,AMT=GRO_AMT INTO #ITEM1 FROM STITEM  WHERE 1=2

Declare @MainTable Varchar(50),@IncExciseCol Bit,@codeType Varchar(2)		

set @MainTable=''									
set @IncExciseCol=0									

DECLARE  C2STKVAL CURSOR FOR 
SELECT  DISTINCT ENTRY_TY,BHENT FROM #RECEIPT WHERE PMKEY='+'
OPEN C2STKVAL
FETCH NEXT FROM C2STKVAL INTO @ENTRY_TY,@BHENT
WHILE @@FETCH_STATUS=0
BEGIN
	set @MainTable=Case when @BHENT<>'' then @BHENT else @ENTRY_TY End+'Main'		
	set @IncExciseCol=0										
	if Exists(Select c.[Name] From Syscolumns c Inner Join Sysobjects b on (b.id=c.id) Where b.[Name]=@MainTable and c.[name]='IncExcise')
	Begin
		set @IncExciseCol=1
	end

	DECLARE  C3STKVAL CURSOR FOR 
	SELECT FLD_NM,ATT_FILE,A_S,WEFSTKFROM,WEFSTKTO,BHENT,TAX_NAME FROM #TAX WHERE (ENTRY_TY=@ENTRY_TY) OR (BHENT='~~')
	OPEN C3STKVAL
	FETCH NEXT FROM  C3STKVAL INTO @FLD_NM,@ATT_FILE,@A_S,@WEFSTKFROM,@WEFSTKTO,@TBHENT,@TAX_NAME
	WHILE @@FETCH_STATUS=0
	BEGIN
		set @codeType=''	
		IF @ATT_FILE='0'
		BEGIN
		    DELETE FROM #ITEM1
		    Select Top 1 @codeType=Code From Dcmast Where Entry_ty=@ENTRY_TY and fld_nm=@FLD_NM		
			SET @SQLCOMMAND='INSERT INTO #ITEM1  (ENTRY_TY,TRAN_CD,ITSERIAL,AMT)'
			SET @SQLCOMMAND=RTRIM(@SQLCOMMAND)+' '+'SELECT A.ENTRY_TY,A.TRAN_CD,A.ITSERIAL,(CASE WHEN A.'+RTRIM(@FLD_NM)+' IS NULL THEN 0 ELSE A.'+RTRIM(@FLD_NM)+' END)  
				FROM '+@BHENT+'ITEM A INNER JOIN DCMAST B ON (A.ENTRY_TY=B.ENTRY_TY ) 
				INNER JOIN '+@MainTable+' C ON (C.TRAN_CD=A.TRAN_CD)
				WHERE A.DATE BETWEEN '+CHAR(39)+CAST(@WEFSTKFROM AS VARCHAR)+CHAR(39)+ ' AND '+CHAR(39)+CAST(@WEFSTKTO AS VARCHAR)+CHAR(39) 
				+' AND A.ENTRY_TY='+CHAR(39)+@ENTRY_TY+CHAR(39)+' AND B.FLD_NM='''
				+RTRIM(@FLD_NM)+''' AND B.STKVAL=1 '+CASE WHEN @IncExciseCol=1 and @codeType='E' THEN +' AND C.INCEXCISE=1 ' ELSE '' END
			EXECUTE SP_EXECUTESQL @SQLCOMMAND	
			
			SET @SQLCOMMAND='UPDATE  A SET A.PMI=A.PMI '+@A_S+' B.AMT FROM #ITEM1 B INNER JOIN #RECEIPT A ON (A.ENTRY_TY=B.ENTRY_TY AND A.TRAN_CD=B.TRAN_CD AND A.ITSERIAL=B.ITSERIAL)  WHERE  A.ENTRY_TY='+CHAR(39)+@ENTRY_TY+CHAR(39)
			EXECUTE SP_EXECUTESQL @SQLCOMMAND
		END	
		ELSE
		BEGIN
			IF @TAX_NAME<>''  
			BEGIN
				DELETE FROM #ITEM1
				
				SET @SQLCOMMAND='INSERT INTO #ITEM1  (ENTRY_TY,TRAN_CD,ITSERIAL,AMT)'
				SET @SQLCOMMAND=RTRIM(@SQLCOMMAND)+' '+'SELECT A.ENTRY_TY,A.TRAN_CD,A.ITSERIAL,(CASE WHEN '+RTRIM(@FLD_NM)+' IS NULL THEN 0 ELSE '+RTRIM(@FLD_NM)+' END)  FROM '+@BHENT+'ITEM A INNER JOIN STAX_MAS B ON (A.ENTRY_TY=B.ENTRY_TY AND RTRIM(A.TAX_NAME)=RTRIM(B.TAX_NAME)) WHERE A.DATE BETWEEN '+CHAR(39)+CAST(@WEFSTKFROM AS VARCHAR)+CHAR(39)+ ' AND '+CHAR(39)+CAST(@WEFSTKTO AS VARCHAR)+CHAR(39)+' AND A.ENTRY_TY='+CHAR(39)+@ENTRY_TY+CHAR(39) +' AND A.TAX_NAME='+CHAR(39) +@TAX_NAME+CHAR(39)+' and  A.taxamt<>0 AND B.STKVAL=1 ' 
				EXECUTE SP_EXECUTESQL @SQLCOMMAND
				SET @SQLCOMMAND='UPDATE A SET A.PMI=A.PMI '+@A_S+' B.AMT FROM #ITEM1 B INNER JOIN #RECEIPT A ON (A.ENTRY_TY=B.ENTRY_TY AND A.TRAN_CD=B.TRAN_CD AND A.ITSERIAL=B.ITSERIAL)  WHERE  A.ENTRY_TY='+CHAR(39)+@ENTRY_TY+CHAR(39)+' ' 
				EXECUTE SP_EXECUTESQL @SQLCOMMAND 

				
			END
			ELSE
			BEGIN
				DELETE FROM #ITEM1 
				SET @SQLCOMMAND='INSERT INTO #ITEM1  (ENTRY_TY,TRAN_CD,ITSERIAL,AMT)'

				SET @SQLCOMMAND=RTRIM(@SQLCOMMAND)+' '+'SELECT A.ENTRY_TY,A.TRAN_CD,ITSERIAL=0,(CASE WHEN '+RTRIM(@FLD_NM)+' IS NULL THEN 0 ELSE '
										+RTRIM(@FLD_NM)+' END)  FROM '+@BHENT+'MAIN A INNER JOIN DCMAST B ON (A.ENTRY_TY=B.ENTRY_TY) WHERE A.DATE BETWEEN '
										+CHAR(39)+CAST(@WEFSTKFROM AS VARCHAR)+CHAR(39)+ ' AND '+CHAR(39)+CAST(@WEFSTKTO AS VARCHAR)+CHAR(39)
										+' AND A.ENTRY_TY='+CHAR(39)+@ENTRY_TY+CHAR(39)+' AND B.FLD_NM='''+RTRIM(@FLD_NM)+''' AND B.STKVAL=1' 
										+CASE WHEN @IncExciseCol=1 and @codeType='E' THEN +' AND A.INCEXCISE=1 ' ELSE '' END
				EXECUTE SP_EXECUTESQL @SQLCOMMAND	
				
				SET @SQLCOMMAND='UPDATE  A SET A.TOTPMV=A.TOTPMV '+@A_S+' B.AMT FROM #ITEM1 B INNER JOIN #RECEIPT A ON (A.ENTRY_TY=B.ENTRY_TY AND A.TRAN_CD=B.TRAN_CD ) WHERE  A.ENTRY_TY='+CHAR(39)+@ENTRY_TY+CHAR(39)
				EXECUTE SP_EXECUTESQL @SQLCOMMAND

			END	
		END
		FETCH NEXT FROM  C3STKVAL INTO @FLD_NM,@ATT_FILE,@A_S,@WEFSTKFROM,@WEFSTKTO,@TBHENT,@TAX_NAME
	END
	CLOSE C3STKVAL
	DEALLOCATE C3STKVAL
	
	DECLARE  C4STKVAL CURSOR FOR 
	SELECT FLD_NM,ATT_FILE,A_S,WEFSTKFROM,WEFSTKTO,BHENT,TAX_NAME FROM #TAXEXCL WHERE (ENTRY_TY=@ENTRY_TY) OR (BHENT='~~')
	OPEN C4STKVAL
	FETCH NEXT FROM  C4STKVAL INTO @FLD_NM,@ATT_FILE,@A_S,@WEFSTKFROM,@WEFSTKTO,@TBHENT,@TAX_NAME
	WHILE @@FETCH_STATUS=0
	BEGIN
		set @codeType=''
		IF @ATT_FILE='0'
		BEGIN
		    DELETE FROM #ITEM1
		    Select Top 1 @codeType=Code From Dcmast Where Entry_ty=@ENTRY_TY and fld_nm=@FLD_NM		
			SET @SQLCOMMAND='INSERT INTO #ITEM1  (ENTRY_TY,TRAN_CD,ITSERIAL,AMT)'
			SET @SQLCOMMAND=RTRIM(@SQLCOMMAND)+' '+'SELECT A.ENTRY_TY,A.TRAN_CD,A.ITSERIAL,(CASE WHEN A.'+RTRIM(@FLD_NM)+' IS NULL THEN 0 ELSE A.'+RTRIM(@FLD_NM)+' END)  
				FROM '+@BHENT+'ITEM A INNER JOIN DCMAST B ON (A.ENTRY_TY=B.ENTRY_TY ) 
				INNER JOIN '+@MainTable+' C ON (C.TRAN_CD=A.TRAN_CD)
				WHERE A.ENTRY_TY='+CHAR(39)+@ENTRY_TY+CHAR(39)+' AND B.FLD_NM='''
				+RTRIM(@FLD_NM)+''' AND B.STKVAL=0 '+CASE WHEN @IncExciseCol=1 and @codeType='E' THEN +' AND C.INCEXCISE=0 ' ELSE '' END
			EXECUTE SP_EXECUTESQL @SQLCOMMAND	
			SET @SQLCOMMAND='UPDATE  A SET A.PMI=A.PMI '+@A_S+' B.AMT FROM #ITEM1 B INNER JOIN #RECEIPT A ON (A.ENTRY_TY=B.ENTRY_TY AND A.TRAN_CD=B.TRAN_CD AND A.ITSERIAL=B.ITSERIAL)  WHERE  A.ENTRY_TY='+CHAR(39)+@ENTRY_TY+CHAR(39)
			
			EXECUTE SP_EXECUTESQL @SQLCOMMAND
		END	
		ELSE
		BEGIN
				DELETE FROM #ITEM1
				SET @SQLCOMMAND='INSERT INTO #ITEM1  (ENTRY_TY,TRAN_CD,ITSERIAL,AMT)'
				SET @SQLCOMMAND=RTRIM(@SQLCOMMAND)+' '+'SELECT A.ENTRY_TY,A.TRAN_CD,ITSERIAL=0,(CASE WHEN '+RTRIM(@FLD_NM)+' IS NULL THEN 0 ELSE '
					+RTRIM(@FLD_NM)+' END)  FROM '+@BHENT+'MAIN A INNER JOIN DCMAST B ON (A.ENTRY_TY=B.ENTRY_TY) 
					WHERE A.ENTRY_TY='+CHAR(39)+@ENTRY_TY+CHAR(39)+' AND B.FLD_NM='''+RTRIM(@FLD_NM)+''' AND B.STKVAL=0' 
					+CASE WHEN @IncExciseCol=1 and @codeType='E' THEN +' AND A.INCEXCISE=0 ' ELSE '' END
				EXECUTE SP_EXECUTESQL @SQLCOMMAND	
				SET @SQLCOMMAND='select  a=1,A.TOTPMV,A.TOTPMV, B.AMT FROM #ITEM1 B INNER JOIN #RECEIPT A ON (A.ENTRY_TY=B.ENTRY_TY AND A.TRAN_CD=B.TRAN_CD ) WHERE  A.ENTRY_TY='+CHAR(39)+@ENTRY_TY+CHAR(39)
				SET @SQLCOMMAND='UPDATE  A SET A.TOTPMV=A.TOTPMV '+@A_S+' B.AMT FROM #ITEM1 B INNER JOIN #RECEIPT A ON (A.ENTRY_TY=B.ENTRY_TY AND A.TRAN_CD=B.TRAN_CD ) WHERE  A.ENTRY_TY='+CHAR(39)+@ENTRY_TY+CHAR(39)
				EXECUTE SP_EXECUTESQL @SQLCOMMAND
		END
		FETCH NEXT FROM  C4STKVAL INTO @FLD_NM,@ATT_FILE,@A_S,@WEFSTKFROM,@WEFSTKTO,@TBHENT,@TAX_NAME
	END
	CLOSE C4STKVAL
	DEALLOCATE C4STKVAL
	--Bug5445
	
	FETCH NEXT FROM C2STKVAL INTO @ENTRY_TY,@BHENT
END
CLOSE C2STKVAL
DEALLOCATE C2STKVAL


---<--Update PMI=Item wise plus/minus amount from dcmast,stax_mas,TOTPMV=Total Voucher wise plus/minus amount from dcmast,stax_mas into ##STKVAL1 from all Item Tables


/*		Updating issue for rate		Start	*/
DECLARE  C2STKVAL CURSOR FOR 
SELECT  DISTINCT ENTRY_TY,BHENT FROM #ISSUE WHERE PMKEY='-'
OPEN C2STKVAL
FETCH NEXT FROM C2STKVAL INTO @ENTRY_TY,@BHENT
WHILE @@FETCH_STATUS=0
BEGIN
	set @MainTable=Case when @BHENT<>'' then @BHENT else @ENTRY_TY End+'Main'		
	set @IncExciseCol=0									
	if Exists(Select c.[Name] From Syscolumns c Inner Join Sysobjects b on (b.id=c.id) Where b.[Name]=@MainTable and c.[name]='IncExcise')
	Begin
		set @IncExciseCol=1
	end

	DECLARE  C3STKVAL CURSOR FOR 
	SELECT FLD_NM,ATT_FILE,A_S,WEFSTKFROM,WEFSTKTO,BHENT,TAX_NAME FROM #TAX WHERE (ENTRY_TY=@ENTRY_TY) OR (BHENT='~~')
	OPEN C3STKVAL
	FETCH NEXT FROM  C3STKVAL INTO @FLD_NM,@ATT_FILE,@A_S,@WEFSTKFROM,@WEFSTKTO,@TBHENT,@TAX_NAME
	WHILE @@FETCH_STATUS=0
	BEGIN
		set @codeType=''	
		IF @ATT_FILE='0'
		BEGIN
		    DELETE FROM #ITEM1
		    Select Top 1 @codeType=Code From Dcmast Where Entry_ty=@ENTRY_TY and fld_nm=@FLD_NM		
			SET @SQLCOMMAND='INSERT INTO #ITEM1  (ENTRY_TY,TRAN_CD,ITSERIAL,AMT)'
			SET @SQLCOMMAND=RTRIM(@SQLCOMMAND)+' '+'SELECT A.ENTRY_TY,A.TRAN_CD,A.ITSERIAL,(CASE WHEN A.'+RTRIM(@FLD_NM)+' IS NULL THEN 0 ELSE A.'+RTRIM(@FLD_NM)+' END)  
				FROM '+@BHENT+'ITEM A INNER JOIN DCMAST B ON (A.ENTRY_TY=B.ENTRY_TY ) 
				INNER JOIN '+@MainTable+' C ON (C.TRAN_CD=A.TRAN_CD)
				WHERE A.DATE BETWEEN '+CHAR(39)+CAST(@WEFSTKFROM AS VARCHAR)+CHAR(39)+ ' AND '+CHAR(39)+CAST(@WEFSTKTO AS VARCHAR)+CHAR(39) 
				+' AND A.ENTRY_TY='+CHAR(39)+@ENTRY_TY+CHAR(39)+' AND B.FLD_NM='''
				+RTRIM(@FLD_NM)+''' AND B.STKVAL=1 '+CASE WHEN @IncExciseCol=1 and @codeType='E' THEN +' AND C.INCEXCISE=1 ' ELSE '' END
			EXECUTE SP_EXECUTESQL @SQLCOMMAND	
			
			SET @SQLCOMMAND='UPDATE  A SET A.PMI=A.PMI '+@A_S+' B.AMT FROM #ITEM1 B INNER JOIN #ISSUE A ON (A.ENTRY_TY=B.ENTRY_TY AND A.TRAN_CD=B.TRAN_CD AND A.ITSERIAL=B.ITSERIAL)  WHERE  A.ENTRY_TY='+CHAR(39)+@ENTRY_TY+CHAR(39)
			EXECUTE SP_EXECUTESQL @SQLCOMMAND
		END	
		ELSE
		BEGIN
			IF @TAX_NAME=''  
			BEGIN
				DELETE FROM #ITEM1 
				SET @SQLCOMMAND='INSERT INTO #ITEM1  (ENTRY_TY,TRAN_CD,ITSERIAL,AMT)'

				SET @SQLCOMMAND=RTRIM(@SQLCOMMAND)+' '+'SELECT A.ENTRY_TY,A.TRAN_CD,ITSERIAL=0,(CASE WHEN '+RTRIM(@FLD_NM)+' IS NULL THEN 0 ELSE '
										+RTRIM(@FLD_NM)+' END)  FROM '+@BHENT+'MAIN A INNER JOIN DCMAST B ON (A.ENTRY_TY=B.ENTRY_TY) WHERE A.DATE BETWEEN '
										+CHAR(39)+CAST(@WEFSTKFROM AS VARCHAR)+CHAR(39)+ ' AND '+CHAR(39)+CAST(@WEFSTKTO AS VARCHAR)+CHAR(39)
										+' AND A.ENTRY_TY='+CHAR(39)+@ENTRY_TY+CHAR(39)+' AND B.FLD_NM='''+RTRIM(@FLD_NM)+''' AND B.STKVAL=1' 
										+CASE WHEN @IncExciseCol=1 and @codeType='E' THEN +' AND A.INCEXCISE=1 ' ELSE '' END
				EXECUTE SP_EXECUTESQL @SQLCOMMAND	
				
				SET @SQLCOMMAND='UPDATE  A SET A.TOTPMV=A.TOTPMV '+@A_S+' B.AMT FROM #ITEM1 B INNER JOIN #ISSUE A ON (A.ENTRY_TY=B.ENTRY_TY AND A.TRAN_CD=B.TRAN_CD ) WHERE  A.ENTRY_TY='+CHAR(39)+@ENTRY_TY+CHAR(39)
				EXECUTE SP_EXECUTESQL @SQLCOMMAND

			END	
		END
		FETCH NEXT FROM  C3STKVAL INTO @FLD_NM,@ATT_FILE,@A_S,@WEFSTKFROM,@WEFSTKTO,@TBHENT,@TAX_NAME
	END
	CLOSE C3STKVAL
	DEALLOCATE C3STKVAL
	
	DECLARE  C4STKVAL CURSOR FOR 
	SELECT FLD_NM,ATT_FILE,A_S,WEFSTKFROM,WEFSTKTO,BHENT,TAX_NAME FROM #TAXEXCL WHERE (ENTRY_TY=@ENTRY_TY) OR (BHENT='~~')
	OPEN C4STKVAL
	FETCH NEXT FROM  C4STKVAL INTO @FLD_NM,@ATT_FILE,@A_S,@WEFSTKFROM,@WEFSTKTO,@TBHENT,@TAX_NAME
	WHILE @@FETCH_STATUS=0
	BEGIN
		set @codeType=''
		IF @ATT_FILE='0'
		BEGIN
		    DELETE FROM #ITEM1
		    Select Top 1 @codeType=Code From Dcmast Where Entry_ty=@ENTRY_TY and fld_nm=@FLD_NM		
			SET @SQLCOMMAND='INSERT INTO #ITEM1  (ENTRY_TY,TRAN_CD,ITSERIAL,AMT)'
			SET @SQLCOMMAND=RTRIM(@SQLCOMMAND)+' '+'SELECT A.ENTRY_TY,A.TRAN_CD,A.ITSERIAL,(CASE WHEN A.'+RTRIM(@FLD_NM)+' IS NULL THEN 0 ELSE A.'+RTRIM(@FLD_NM)+' END)  
				FROM '+@BHENT+'ITEM A INNER JOIN DCMAST B ON (A.ENTRY_TY=B.ENTRY_TY ) 
				INNER JOIN '+@MainTable+' C ON (C.TRAN_CD=A.TRAN_CD)
				WHERE A.ENTRY_TY='+CHAR(39)+@ENTRY_TY+CHAR(39)+' AND B.FLD_NM='''
				+RTRIM(@FLD_NM)+''' AND B.STKVAL=0 '+CASE WHEN @IncExciseCol=1 and @codeType='E' THEN +' AND C.INCEXCISE=0 ' ELSE '' END
			EXECUTE SP_EXECUTESQL @SQLCOMMAND	
			SET @SQLCOMMAND='UPDATE  A SET A.PMI=A.PMI '+@A_S+' B.AMT FROM #ITEM1 B INNER JOIN #ISSUE A ON (A.ENTRY_TY=B.ENTRY_TY AND A.TRAN_CD=B.TRAN_CD AND A.ITSERIAL=B.ITSERIAL)  WHERE  A.ENTRY_TY='+CHAR(39)+@ENTRY_TY+CHAR(39)
			
			EXECUTE SP_EXECUTESQL @SQLCOMMAND
		END	
		ELSE
		BEGIN
				DELETE FROM #ITEM1
				SET @SQLCOMMAND='INSERT INTO #ITEM1  (ENTRY_TY,TRAN_CD,ITSERIAL,AMT)'
				SET @SQLCOMMAND=RTRIM(@SQLCOMMAND)+' '+'SELECT A.ENTRY_TY,A.TRAN_CD,ITSERIAL=0,(CASE WHEN '+RTRIM(@FLD_NM)+' IS NULL THEN 0 ELSE '
					+RTRIM(@FLD_NM)+' END)  FROM '+@BHENT+'MAIN A INNER JOIN DCMAST B ON (A.ENTRY_TY=B.ENTRY_TY) 
					WHERE A.ENTRY_TY='+CHAR(39)+@ENTRY_TY+CHAR(39)+' AND B.FLD_NM='''+RTRIM(@FLD_NM)+''' AND B.STKVAL=0' 
					+CASE WHEN @IncExciseCol=1 and @codeType='E' THEN +' AND A.INCEXCISE=0 ' ELSE '' END
				EXECUTE SP_EXECUTESQL @SQLCOMMAND	

				SET @SQLCOMMAND='UPDATE  A SET A.TOTPMV=A.TOTPMV '+@A_S+' B.AMT FROM #ITEM1 B INNER JOIN #ISSUE A ON (A.ENTRY_TY=B.ENTRY_TY AND A.TRAN_CD=B.TRAN_CD ) WHERE  A.ENTRY_TY='+CHAR(39)+@ENTRY_TY+CHAR(39)
				EXECUTE SP_EXECUTESQL @SQLCOMMAND
		END
		FETCH NEXT FROM  C4STKVAL INTO @FLD_NM,@ATT_FILE,@A_S,@WEFSTKFROM,@WEFSTKTO,@TBHENT,@TAX_NAME
	END
	CLOSE C4STKVAL
	DEALLOCATE C4STKVAL
	
	FETCH NEXT FROM C2STKVAL INTO @ENTRY_TY,@BHENT
END
CLOSE C2STKVAL
DEALLOCATE C2STKVAL

UPDATE A SET ASSEAMT=(select SUM(b.QTY * b.RATE) from STKL_VW_ITEM B where A.TRAN_CD=B.TRAN_CD and A.ENTRY_TY=B.ENTRY_TY) FROM #ISSUE A 

UPDATE  #ISSUE SET PMV=(TOTPMV*(QTY * RATE))/(CASE WHEN ASSEAMT=0 THEN 1 ELSE ASSEAMT END)  WHERE PMKEY='-'  

UPDATE  #ISSUE SET FRATE=(((QTY*RATE)/RATEPER)+PMI+PMV)/(CASE WHEN qty=0 THEN 1 ELSE qty END)   WHERE PMKEY='-'



/*		Updating issue for rate		End		*/



----->Update (Item wise i.e. Sales Tax,Packing Forwarding )PMV form total Voucher wise plus/minus amount  from dcmast,stax_mas into ##STKVAL1 from all Item Tables
UPDATE A SET ASSEAMT=(select SUM(b.QTY * b.RATE) from STKL_VW_ITEM B where A.TRAN_CD=B.TRAN_CD and A.ENTRY_TY=B.ENTRY_TY) FROM #RECEIPT A 

UPDATE  #RECEIPT SET PMV=(TOTPMV*(QTY * RATE))/(CASE WHEN ASSEAMT=0 THEN 1 ELSE ASSEAMT END)  WHERE PMKEY='+'  
----<-Update (Item wise i.e. Sales Tax,Packing Forwarding )PMV form total Voucher wise plus/minus amount  from dcmast,stax_mas into ##STKVAL1 from all Item Tables

----->Calculate FRATE=fianal rate
UPDATE  #RECEIPT SET FRATE=(((QTY*RATE)/RATEPER)+PMI+PMV)/(CASE WHEN qty=0 THEN 1 ELSE qty END)   WHERE PMKEY='+'

UPDATE  #RECEIPT SET FRATE=0 WHERE BHENT='SR'
----<-Calculate FRATE=fianal rate

--SELECT * FROM #RECEIPT 
--SELECT * FROM #ISSUE


----->Update FRATE TO RECEIPT WHERE FRATE=0 WITH PREV.ENTRY RATE.
--select 'c',* from #RECEIPT
SET @LRATE=0
SET @MIT_CODE=-1
SET @MWARE_NM=' '
SET @MVNAME	=' '	--Bug20309
SELECT * INTO #TRECEIPT FROM #RECEIPT

---->Update FRATE TO RECEIPT WHERE FRATE=0 WITH PREV.ENTRY RATE.






DECLARE  STKVALCRSOR1 CURSOR FOR SELECT IT_CODE,FRATE,ENTRY_TY,TRAN_CD,ITSERIAL,WARE_NM,dc_no,VNAME FROM #TRECEIPT 
ORDER BY VNAME,IT_CODE,WARE_NM,DATE,(CASE WHEN ENTRY_TY='OS' THEN 'A' ELSE (CASE WHEN PMKEY='+' THEN (CASE WHEN ENTRY_TY='SR' THEN 'C' ELSE 'B' end) ELSE 'D' END) END),TRAN_CD,ITSERIAL	
OPEN  STKVALCRSOR1
FETCH NEXT FROM STKVALCRSOR1 INTO @IT_CODE,@FRATE,@ENTRY_TY,@TRAN_CD,@ITSERIAL,@WARE_NM,@dc_no,@VNAME	
WHILE (@@FETCH_STATUS=0)
BEGIN
	IF (@MIT_CODE<>@IT_CODE) OR (@MVNAME<>@VNAME)	
	BEGIN
		SET @LRATE=@FRATE
		SET @MIT_CODE=@IT_CODE
		SET @MVNAME=@VNAME			
	END

	IF (@FRATE)>0
	BEGIN
		SET @LRATE=@FRATE
	END
	IF (@FRATE=0 AND @LRATE>0)
	BEGIN
		UPDATE #RECEIPT SET FRATE=@LRATE WHERE (ENTRY_TY=@ENTRY_TY AND TRAN_CD=@TRAN_CD AND ITSERIAL=@ITSERIAL)
	END

	FETCH NEXT FROM STKVALCRSOR1 INTO @IT_CODE,@FRATE,@ENTRY_TY,@TRAN_CD,@ITSERIAL,@WARE_NM,@dc_no,@VNAME
END
CLOSE STKVALCRSOR1
DEALLOCATE STKVALCRSOR1
----<-Update FRATE TO RECEIPT WHERE FRATE=0 WITH PREV.ENTRY RATE.


UPDATE A SET A.FRATE=C.FRATE
FROM ##STKVAL1  A 
LEFT JOIN #RECEIPT C ON (C.ENTRY_TY=A.ENTRY_TY AND C.TRAN_CD=A.TRAN_CD AND C.ITSERIAL=A.ITSERIAL)

UPDATE A SET A.SRATE=C.FRATE
FROM ##STKVAL1  A 
LEFT JOIN #ISSUE C ON (C.ENTRY_TY=A.ENTRY_TY AND C.TRAN_CD=A.TRAN_CD AND C.ITSERIAL=A.ITSERIAL)


---->Update Frate with Allocated Entry rate (AR<-PT)
SELECT A.ENTRY_TY,A.DATE,A.TRAN_CD,A.ITSERIAL,A.RENTRY_TY,A.ITREF_TRAN,A.RITSERIAL INTO #ITR1 FROM STKL_VW_ITREF A INNER JOIN LCODE B ON (A.RENTRY_TY=B.ENTRY_TY) INNER JOIN LCODE C ON (A.ENTRY_TY=C.ENTRY_TY) where B.inv_stk<>' ' AND B.INV_STK=C.INV_STK 

UPDATE A SET A.FRATE=C.FRATE 
FROM ##STKVAL1  A 
LEFT JOIN #ITR1 B ON (A.ENTRY_TY=B.RENTRY_TY AND A.TRAN_CD=B.ITREF_TRAN AND A.ITSERIAL=B.RITSERIAL)
LEFT JOIN #RECEIPT C ON (C.ENTRY_TY=B.ENTRY_TY AND C.TRAN_CD=B.TRAN_CD AND C.ITSERIAL=B.ITSERIAL)
WHERE (ISNULL(C.RATE,0)<>0 AND C.RATE<>0)
---<-Update Frate with Allocated Entry rate (AR<-PT)


--->Delete Allcated entry i.e. PT
DELETE FROM ##STKVAL1 WHERE LEN(DC_NO)>2 
---<-Delete Allcated entry i.e. PT

--select * from ##STKVAL1


DECLARE @CNT NUMERIC(18)
SET @CNT=0
	--->In Receipt Entry qty and rate direct enter into ##STKVALFL .In Issue entry Qty is allocated prev receipt entry.If Issue is allocated againts multiple receipt then it has multiple entries with same qty and different allocated qty (aqty) field.

	DECLARE @FETCH_STATUSFifo BIT	
	SELECT ENTRY_TY,TRAN_CD,ITSERIAL,WARE_NM,DATE,IT_CODE,QTY,RATE=FRATE,AQTY=QTY,PMKEY,CNT=0,IT_NAME,AENTRY_TY=ENTRY_TY,ATRAN_CD=TRAN_CD,AITSERIAL=ITSERIAL,AWARE_NM=WARE_NM,ADATE=DATE,DC_NO,VNAME,AVNAME=VNAME,SRATE=FRATE INTO ##STKVALFIFO FROM ##STKVAL1 WHERE 1=2 
	
	DECLARE STKVALCRSOR1 CURSOR FOR 
	SELECT ENTRY_TY,TRAN_CD,ITSERIAL,WARE_NM,DATE,IT_CODE,QTY,FRATE,PMKEY,IT_NAME,DC_NO,VNAME,SRATE FROM ##STKVAL1  WHERE VTYPE = 'FIFO' or VTYPE = '' ORDER BY VNAME,IT_CODE,WARE_NM,(CASE WHEN ENTRY_TY='OS' THEN 'A' ELSE (CASE WHEN PMKEY='+' THEN 'B' ELSE 'C'END) END),DATE,TRAN_CD,ITSERIAL	--Bug8025	--Bug20309
	OPEN STKVALCRSOR1
	FETCH NEXT FROM STKVALCRSOR1 INTO @ENTRY_TY,@TRAN_CD,@ITSERIAL,@WARE_NM,@DATE,@IT_CODE,@QTY,@RATE,@PMKEY,@IT_NAME,@DC_NO,@VNAME,@SRATE	
	--                                        	
	WHILE (@@FETCH_STATUS=0)
	BEGIN
		
		SET @CNT=@CNT+1	
		IF (@PMKEY='+')
		BEGIN
			
			INSERT INTO ##STKVALFIFO
				(ENTRY_TY,TRAN_CD,ITSERIAL,WARE_NM,DATE,IT_CODE,QTY,RATE,AQTY,PMKEY,CNT,IT_NAME,AENTRY_TY,ATRAN_CD,AITSERIAL,AWARE_NM,ADATE,DC_NO,VNAME,SRATE)	
			VALUES (@ENTRY_TY,@TRAN_CD,@ITSERIAL,@WARE_NM,@DATE,@IT_CODE,@QTY,@RATE,0,@PMKEY,@CNT,@IT_NAME,' ',0,' ',' ',@SDATE,@DC_NO,@VNAME,@SRATE) 
		END			
		IF (@PMKEY='-')
		BEGIN
			
			SET @IBALQTY1=@QTY
			
				DECLARE STKVALCRSOR2 CURSOR FOR 
				SELECT ENTRY_TY,TRAN_CD,ITSERIAL,VNAME,WARE_NM,DATE,IT_CODE,QTY,RATE,AQTY FROM ##STKVALFIFO WHERE ( IT_CODE=@IT_CODE AND VNAME=@VNAME) AND (PMKEY='+') AND ((QTY-AQTY)>0) ORDER BY VNAME,IT_CODE ,DATE,TRAN_CD,ITSERIAL	
			
			OPEN STKVALCRSOR2                                                          
			FETCH NEXT FROM STKVALCRSOR2 INTO @ENTRY_TY1,@TRAN_CD1,@ITSERIAL1,@VNAME1,@WARE_NM1,@DATE1,@IT_CODE1,@QTY1,@RATE1,@AQTY1	
			IF (@@FETCH_STATUS=0)
			BEGIN
				SET @FETCH_STATUSFifo=0	
			END
			WHILE (@FETCH_STATUSFifo=0)	
			BEGIN
				SET @CNT=@CNT+1
				print '--------'

				 IF ((@QTY1-@AQTY1-@IBALQTY1)>0)
				 BEGIN
					
					SET @AQTY=@IBALQTY1
					SET @IBALQTY1=0
					  	
/*Start 25/03/2010	: Changes for Receipt Rate*/
					UPDATE ##STKVALFIFO SET AQTY=AQTY+@AQTY WHERE (ENTRY_TY=@ENTRY_TY1 AND TRAN_CD=@TRAN_CD1 AND ITSERIAL=@ITSERIAL1 AND IT_CODE=@IT_CODE)
/*End 25/03/2010		: Changes for Receipt Rate*/

					INSERT INTO ##STKVALFIFO
					    (ENTRY_TY,TRAN_CD,ITSERIAL,WARE_NM,DATE,IT_CODE,QTY,RATE,AQTY,PMKEY,CNT,IT_NAME,AENTRY_TY,ATRAN_CD,AITSERIAL,AWARE_NM,ADATE,DC_NO,VNAME,AVNAME,SRATE)	
					VALUES (@ENTRY_TY,@TRAN_CD,@ITSERIAL,@WARE_NM,@DATE,@IT_CODE,@QTY,@RATE1,@AQTY,@PMKEY,@CNT,@IT_NAME,@ENTRY_TY1,@TRAN_CD1,@ITSERIAL1,@WARE_NM1,@DATE1,@DC_NO1,@VNAME,@VNAME1,@SRATE)	
				 END
				 ELSE
				 BEGIN
					
					SET @IBALQTY1=@IBALQTY1-(@QTY1-@AQTY1)
					SET @AQTY=(@QTY1-@AQTY1)
					
					UPDATE ##STKVALFIFO SET AQTY=QTY WHERE (ENTRY_TY=@ENTRY_TY1 AND TRAN_CD=@TRAN_CD1 AND ITSERIAL=@ITSERIAL1 AND IT_CODE=@IT_CODE)
					INSERT INTO ##STKVALFIFO
					    (ENTRY_TY,TRAN_CD,ITSERIAL,WARE_NM,DATE,IT_CODE,QTY,RATE,AQTY,PMKEY,CNT,IT_NAME,AENTRY_TY,ATRAN_CD,AITSERIAL,AWARE_NM,ADATE,DC_NO,VNAME,AVNAME,SRATE)		
					VALUES (@ENTRY_TY,@TRAN_CD,@ITSERIAL,@WARE_NM,@DATE,@IT_CODE,@QTY,@RATE1,@AQTY,@PMKEY,@CNT,@IT_NAME,@ENTRY_TY1,@TRAN_CD1,@ITSERIAL1,@WARE_NM1,@DATE1,@DC_NO1,@VNAME,@VNAME1,@SRATE)		
				 END
				
				FETCH NEXT FROM STKVALCRSOR2 INTO @ENTRY_TY1,@TRAN_CD1,@ITSERIAL1,@VNAME1,@WARE_NM1,@DATE1,@IT_CODE1,@QTY1,@RATE1,@AQTY1	
				IF (@IBALQTY1=0 OR @@FETCH_STATUS<>0)
				BEGIN
					SET @FETCH_STATUSFifo=-1	
				END
			END	
			CLOSE STKVALCRSOR2
			DEALLOCATE STKVALCRSOR2
			
			
			IF @IBALQTY1>0
			BEGIN
				SET @AQTY=@IBALQTY1
				 INSERT INTO ##STKVALFIFO
					    (ENTRY_TY,TRAN_CD,ITSERIAL,WARE_NM,DATE,IT_CODE,QTY,RATE,AQTY,PMKEY,CNT,IT_NAME,AENTRY_TY,ATRAN_CD,AITSERIAL,AWARE_NM,ADATE,DC_NO,VNAME,AVNAME,SRATE)	
				 VALUES (@ENTRY_TY,@TRAN_CD,@ITSERIAL,@WARE_NM,@DATE,@IT_CODE,@QTY,@RATE,@AQTY,@PMKEY,@CNT,@IT_NAME,' ',0,' ',' ',@SDATE,@DC_NO,@VNAME,' ',@SRATE)		
			END
		END
		FETCH NEXT FROM STKVALCRSOR1 INTO @ENTRY_TY,@TRAN_CD,@ITSERIAL,@WARE_NM,@DATE,@IT_CODE,@QTY,@RATE,@PMKEY,@IT_NAME,@DC_NO,@VNAME,@SRATE				
	END
	CLOSE STKVALCRSOR1
	DEALLOCATE STKVALCRSOR1



	
	Select Colno=IDENTITY(int, 1, 1),Vname,It_Code,Ware_nm,Rate Into #tmp1STKVALFifo From ##STKVALFIFO	
		where PmKey = '-' and ATran_cd != 0 Order By VName,It_Code,Ware_nm,Date	
	
	Select Max(Colno) As ColNo,VName,It_Code Into #tmp2STKVALFifo From #tmp1STKVALFifo	
	Group By VName,It_Code		

		
	Update ##STKVALFIFO Set Rate = b.Rate from ##STKVALFIFO a,#tmp1STKVALFifo b,#tmp2STKVALFifo c
		Where a.It_code = b.It_code  and a.VName = b.VName	
		and b.colno = c.colno
		and a.PmKey = '-' and ATran_cd = 0
		
	Drop Table #tmp1STKVALFifo
	Drop Table #tmp2STKVALFifo
	
	--SELECT * FROM ##STKVALFIFO
	

	INSERT INTO ##STKVAL 
	(IT_CODE,IT_NAME,OPBAL,OPAMT,RQTY,RAMT,IQTY,IAMT,CLBAL,CLAMT,VNAME,stkYear,stkMonth,stkMonthNm)	

	SELECT 
   IT_CODE,IT_NAME,
	OPBAL=SUM(CASE WHEN ENTRY_TY='OS' OR DATE<@SDATE THEN (CASE WHEN PMKEY='+' THEN (CASE WHEN DC_NO='DI' THEN 0 ELSE QTY END ) ELSE -AQTY  END) ELSE 0  END)
	,OPAMT=SUM(CASE WHEN ENTRY_TY='OS' OR DATE<@SDATE THEN (CASE WHEN PMKEY='+' THEN QTY*RATE ELSE -(AQTY*RATE)  END) ELSE 0  END)
	,RQTY=SUM(CASE WHEN (ENTRY_TY<>'OS' AND DATE>=@SDATE AND PMKEY='+') THEN (CASE WHEN DC_NO='DI' THEN 0 ELSE QTY END ) ELSE 0 END) 
	,RAMT=SUM(CASE WHEN (ENTRY_TY<>'OS' AND DATE>=@SDATE AND PMKEY='+') THEN QTY*RATE ELSE 0 END)
	,IQTY=SUM(CASE WHEN (ENTRY_TY<>'OS' AND DATE>=@SDATE AND PMKEY='-') THEN AQTY ELSE 0 END)
	,IAMT=SUM(CASE WHEN (ENTRY_TY<>'OS' AND DATE>=@SDATE AND PMKEY='-') THEN AQTY* SRATE ELSE 0 END)
	,CLBAL=SUM((CASE WHEN PMKEY='+' THEN (CASE WHEN DC_NO='DI' THEN 0 ELSE QTY END ) ELSE -AQTY  END)) 
	,CLAMT=SUM(CASE WHEN PMKEY='+' THEN QTY*RATE ELSE -(AQTY*RATE)  END)
	,VNAME
	,stkYear=CASE WHEN ENTRY_TY='OS' OR DATE<@SDATE then 0 else  YEAR(Date) End
	,stkMonth=CASE WHEN ENTRY_TY='OS' OR DATE<@SDATE then 0 else  Month(Date) End
	,stkMonthNm=CASE WHEN ENTRY_TY='OS' OR DATE<@SDATE then 'Opening Balance' else convert(varchar(3),DATE,107) End
	FROM ##STKVALFIFO 
	GROUP BY IT_CODE,IT_NAME,VNAME
	,CASE WHEN ENTRY_TY='OS' OR DATE<@SDATE then 0 else  YEAR(Date) End
	,CASE WHEN ENTRY_TY='OS' OR DATE<@SDATE then 0 else  Month(Date) End
	,CASE WHEN ENTRY_TY='OS' OR DATE<@SDATE then 'Opening Balance' else convert(varchar(3),DATE,107) End	

--	select * from ##STKVAL
	
	DROP TABLE ##STKVALFIFO	

	--For LIFO
	--BEGIN											
	--->In Receipt Entry qty and rate direct enter into ##STKVALFL .In Issue entry Qty is allocated prev receipt entry.If Issue is allocated againts multiple receipt then it has multiple entries with same qty and different allocated qty (aqty) field.

	DECLARE @FETCH_STATUSLifo BIT	
	SELECT ENTRY_TY,TRAN_CD,ITSERIAL,WARE_NM,DATE,IT_CODE,QTY,RATE=FRATE,AQTY=QTY,PMKEY,CNT=0,IT_NAME,AENTRY_TY=ENTRY_TY,ATRAN_CD=TRAN_CD,AITSERIAL=ITSERIAL,AWARE_NM=WARE_NM,ADATE=DATE,DC_NO,VNAME,SRATE=FRATE INTO ##STKVALLIFO FROM ##STKVAL1 WHERE 1=2 
	
	DECLARE STKVALCRSOR1 CURSOR FOR 

	SELECT ENTRY_TY,TRAN_CD,ITSERIAL,WARE_NM,DATE,IT_CODE,QTY,FRATE,PMKEY,IT_NAME,DC_NO,VNAME,SRATE FROM ##STKVAL1  WHERE VTYPE = 'LIFO' ORDER BY VNAME,IT_CODE,WARE_NM,(CASE WHEN ENTRY_TY='OS' THEN 'A' ELSE (CASE WHEN PMKEY='+' THEN 'B' ELSE 'C'END) END),DATE,TRAN_CD,ITSERIAL	
	OPEN STKVALCRSOR1
	FETCH NEXT FROM STKVALCRSOR1 INTO @ENTRY_TY,@TRAN_CD,@ITSERIAL,@WARE_NM,@DATE,@IT_CODE,@QTY,@RATE,@PMKEY,@IT_NAME,@DC_NO,@VNAME,@SRATE	
	--                                        	
	WHILE (@@FETCH_STATUS=0)
	BEGIN
		
		SET @CNT=@CNT+1	
		IF (@PMKEY='+')
		BEGIN
			
			INSERT INTO ##STKVALLIFO
				(ENTRY_TY,TRAN_CD,ITSERIAL,WARE_NM,DATE,IT_CODE,QTY,RATE,AQTY,PMKEY,CNT,IT_NAME,AENTRY_TY,ATRAN_CD,AITSERIAL,AWARE_NM,ADATE,DC_NO,VNAME,SRATE)	
			VALUES (@ENTRY_TY,@TRAN_CD,@ITSERIAL,@WARE_NM,@DATE,@IT_CODE,@QTY,@RATE,0,@PMKEY,@CNT,@IT_NAME,' ',0,' ',' ',@SDATE,@DC_NO,@VNAME,@SRATE) 
		END			
		IF (@PMKEY='-')
		BEGIN
			
			SET @IBALQTY1=@QTY
			
				DECLARE STKVALCRSOR2 CURSOR FOR 
				SELECT ENTRY_TY,TRAN_CD,ITSERIAL,WARE_NM,DATE,IT_CODE,QTY,RATE,AQTY FROM ##STKVALLIFO WHERE (IT_CODE=@IT_CODE) AND (PMKEY='+') AND ((QTY-AQTY)>0) ORDER BY DATE desc,TRAN_CD desc ,ITSERIAL DESC 

			OPEN STKVALCRSOR2                                                          
			FETCH NEXT FROM STKVALCRSOR2 INTO @ENTRY_TY1,@TRAN_CD1,@ITSERIAL1,@WARE_NM1,@DATE1,@IT_CODE1,@QTY1,@RATE1,@AQTY1
			IF (@@FETCH_STATUS=0)
			BEGIN
				SET @FETCH_STATUSLifo=0	
			END
			WHILE (@FETCH_STATUSLifo=0)	
			BEGIN
				SET @CNT=@CNT+1
				print '--------'

				 IF ((@QTY1-@AQTY1-@IBALQTY1)>0)
				 BEGIN
					
					SET @AQTY=@IBALQTY1
					SET @IBALQTY1=0
					  	
/*Start 25/03/2010	: Changes for Receipt Rate*/
					UPDATE ##STKVALLIFO SET AQTY=AQTY+@AQTY WHERE (ENTRY_TY=@ENTRY_TY1 AND TRAN_CD=@TRAN_CD1 AND ITSERIAL=@ITSERIAL1 AND IT_CODE=@IT_CODE)
/*End 25/03/2010		: Changes for Receipt Rate*/

					INSERT INTO ##STKVALLIFO
					    (ENTRY_TY,TRAN_CD,ITSERIAL,WARE_NM,DATE,IT_CODE,QTY,RATE,AQTY,PMKEY,CNT,IT_NAME,AENTRY_TY,ATRAN_CD,AITSERIAL,AWARE_NM,ADATE,DC_NO,VNAME,SRATE)	
					VALUES (@ENTRY_TY,@TRAN_CD,@ITSERIAL,@WARE_NM,@DATE,@IT_CODE,@QTY,@RATE1,@AQTY,@PMKEY,@CNT,@IT_NAME,@ENTRY_TY1,@TRAN_CD1,@ITSERIAL1,@WARE_NM1,@DATE1,@DC_NO1,@VNAME,@SRATE)	 
				 END
				 ELSE
				 BEGIN
					
					SET @IBALQTY1=@IBALQTY1-(@QTY1-@AQTY1)
					SET @AQTY=(@QTY1-@AQTY1)
					
					UPDATE ##STKVALLIFO SET AQTY=QTY WHERE (ENTRY_TY=@ENTRY_TY1 AND TRAN_CD=@TRAN_CD1 AND ITSERIAL=@ITSERIAL1 AND IT_CODE=@IT_CODE)
					INSERT INTO ##STKVALLIFO
					    (ENTRY_TY,TRAN_CD,ITSERIAL,WARE_NM,DATE,IT_CODE,QTY,RATE,AQTY,PMKEY,CNT,IT_NAME,AENTRY_TY,ATRAN_CD,AITSERIAL,AWARE_NM,ADATE,DC_NO,VNAME,SRATE)		
					VALUES (@ENTRY_TY,@TRAN_CD,@ITSERIAL,@WARE_NM,@DATE,@IT_CODE,@QTY,@RATE1,@AQTY,@PMKEY,@CNT,@IT_NAME,@ENTRY_TY1,@TRAN_CD1,@ITSERIAL1,@WARE_NM1,@DATE1,@DC_NO1,@VNAME,@SRATE)		
				 END
				
				
				FETCH NEXT FROM STKVALCRSOR2 INTO @ENTRY_TY1,@TRAN_CD1,@ITSERIAL1,@WARE_NM1,@DATE1,@IT_CODE1,@QTY1,@RATE1,@AQTY1
				IF (@IBALQTY1=0 OR @@FETCH_STATUS<>0)
				BEGIN
					SET @FETCH_STATUSLifo=-1		
				END
			END	
			CLOSE STKVALCRSOR2
			DEALLOCATE STKVALCRSOR2
			
			
			IF @IBALQTY1>0
			BEGIN
				SET @AQTY=@IBALQTY1
				 INSERT INTO ##STKVALLIFO
					    (ENTRY_TY,TRAN_CD,ITSERIAL,WARE_NM,DATE,IT_CODE,QTY,RATE,AQTY,PMKEY,CNT,IT_NAME,AENTRY_TY,ATRAN_CD,AITSERIAL,AWARE_NM,ADATE,DC_NO,VNAME,SRATE)	
				 VALUES (@ENTRY_TY,@TRAN_CD,@ITSERIAL,@WARE_NM,@DATE,@IT_CODE,@QTY,@RATE,@AQTY,@PMKEY,@CNT,@IT_NAME,' ',0,' ',' ',@SDATE,@DC_NO,@VNAME,@SRATE)		
			END
		END
		FETCH NEXT FROM STKVALCRSOR1 INTO @ENTRY_TY,@TRAN_CD,@ITSERIAL,@WARE_NM,@DATE,@IT_CODE,@QTY,@RATE,@PMKEY,@IT_NAME,@DC_NO,@VNAME,@SRATE				
	END
	CLOSE STKVALCRSOR1
	DEALLOCATE STKVALCRSOR1


	Select Colno=IDENTITY(int, 1, 1),It_Code,Ware_nm,Rate Into #tmp1STKVALLifo From ##STKVALLIFO
		where PmKey = '-' and ATran_cd != 0 Order By It_Code,Ware_nm,Date
	
	Select Max(Colno) As ColNo,It_Code Into #tmp2STKVALLifo From #tmp1STKVALLifo
	Group By It_Code
	
	Update ##STKVALLIFO Set Rate = b.Rate from ##STKVALLIFO a,#tmp1STKVALLifo b,#tmp2STKVALLifo c
		Where a.It_code = b.It_code 
		and b.colno = c.colno
		and a.PmKey = '-' and ATran_cd = 0
		
	Drop Table #tmp1STKVALLifo
	Drop Table #tmp2STKVALLifo
	
	INSERT INTO ##STKVAL 
	(IT_CODE,IT_NAME,OPBAL,OPAMT,RQTY,RAMT,IQTY,IAMT,CLBAL,CLAMT,VNAME,stkYear,stkMonth,stkMonthNm)	

	SELECT 
   IT_CODE,IT_NAME,
	OPBAL=SUM(CASE WHEN ENTRY_TY='OS' OR DATE<@SDATE THEN (CASE WHEN PMKEY='+' THEN (CASE WHEN DC_NO='DI' THEN 0 ELSE QTY END ) ELSE -AQTY  END) ELSE 0  END)
	,OPAMT=SUM(CASE WHEN ENTRY_TY='OS' OR DATE<@SDATE THEN (CASE WHEN PMKEY='+' THEN QTY*RATE ELSE -(AQTY*RATE)  END) ELSE 0  END)
	,RQTY=SUM(CASE WHEN (ENTRY_TY<>'OS' AND DATE>=@SDATE AND PMKEY='+') THEN (CASE WHEN DC_NO='DI' THEN 0 ELSE QTY END ) ELSE 0 END) 
	,RAMT=SUM(CASE WHEN (ENTRY_TY<>'OS' AND DATE>=@SDATE AND PMKEY='+') THEN QTY*RATE ELSE 0 END)
	,IQTY=SUM(CASE WHEN (ENTRY_TY<>'OS' AND DATE>=@SDATE AND PMKEY='-') THEN AQTY ELSE 0 END)
	,IAMT=SUM(CASE WHEN (ENTRY_TY<>'OS' AND DATE>=@SDATE AND PMKEY='-') THEN AQTY* SRATE ELSE 0 END)
	,CLBAL=SUM((CASE WHEN PMKEY='+' THEN (CASE WHEN DC_NO='DI' THEN 0 ELSE QTY END ) ELSE -AQTY  END)) 
	,CLAMT=SUM(CASE WHEN PMKEY='+' THEN QTY*RATE ELSE -(AQTY*RATE)  END)
	,VNAME	
	,stkYear=CASE WHEN ENTRY_TY='OS' OR DATE<@SDATE then 0 else  YEAR(Date) End
	,stkMonth=CASE WHEN ENTRY_TY='OS' OR DATE<@SDATE then 0 else  Month(Date) End
	,stkMonthNm=CASE WHEN ENTRY_TY='OS' OR DATE<@SDATE then 'Opening Balance' else convert(varchar(3),DATE,107) End
	FROM ##STKVALLIFO 
	GROUP BY IT_CODE,IT_NAME,VNAME
	 ,CASE WHEN ENTRY_TY='OS' OR DATE<@SDATE then 0 else  YEAR(Date) End
	 ,CASE WHEN ENTRY_TY='OS' OR DATE<@SDATE then 0 else  Month(Date) End
	,CASE WHEN ENTRY_TY='OS' OR DATE<@SDATE then 'Opening Balance' else convert(varchar(3),DATE,107) End		


	Update ##STKVAL Set Status = ''
	
	DROP TABLE ##STKVALLIFO	

set @mit_code=-1
--For AVG
--BEGIN						
	declare @av_balqty numeric(17,3),@av_balamt numeric(17,2)

	SELECT ENTRY_TY,TRAN_CD,ITSERIAL,WARE_NM,DATE,IT_CODE,QTY,RATE=FRATE,PMKEY,CNT=0,IT_NAME,DC_NO,VNAME,SRATE=FRATE INTO ##STKVALAVG FROM ##STKVAL1 WHERE 1=2 
	DECLARE STKVALCRSOR1 CURSOR FOR 
	SELECT ENTRY_TY,TRAN_CD,ITSERIAL,WARE_NM,DATE,IT_CODE,QTY,FRATE,PMKEY,IT_NAME,DC_NO,VNAME,SRATE FROM  ##STKVAL1 WHERE VTYPE = 'AVG' ORDER BY VNAME,IT_CODE,WARE_NM,DATE,(CASE WHEN ENTRY_TY='OS' THEN 'A' ELSE (CASE WHEN PMKEY='+' THEN 'B' ELSE 'C'END) END),TRAN_CD,ITSERIAL 
	OPEN STKVALCRSOR1
	FETCH NEXT FROM STKVALCRSOR1 INTO @ENTRY_TY,@TRAN_CD,@ITSERIAL,@WARE_NM,@DATE,@IT_CODE,@QTY,@RATE,@PMKEY,@IT_NAME,@DC_NO,@VNAME,@SRATE
	WHILE (@@FETCH_STATUS=0)
	BEGIN

	IF (@MIT_CODE<>@IT_CODE)  OR (@MVNAME<>@VNAME) 
	BEGIN
		SET @MIT_CODE=@IT_CODE

		set @av_balqty=0
		set @av_balamt=0
		SET @MVNAME=@VNAME		
	END
	if @pmkey='+' 
	begin
		set @av_balqty=@av_balqty+@qty
		set @av_balamt=@av_balamt+(@qty*@rate)
	end
	if @pmkey='-'
	begin
		if @av_balqty<>0
		begin
			set @rate=@av_balamt/@av_balqty
		end
		else
		begin
			set @rate=0
		end	
		set @av_balqty=@av_balqty-@qty
		set @av_balamt=@av_balamt-(@qty*@rate)
	end 
	INSERT INTO ##STKVALAVG
		(ENTRY_TY,TRAN_CD,ITSERIAL,WARE_NM,DATE,IT_CODE,QTY,RATE,PMKEY,CNT,IT_NAME,DC_NO,VNAME,SRATE)		
		VALUES (@ENTRY_TY,@TRAN_CD,@ITSERIAL,@WARE_NM,@DATE,@IT_CODE,@QTY,@RATE,@PMKEY,@CNT,@IT_NAME,@DC_NO,@VNAME,@SRATE) 

		FETCH NEXT FROM STKVALCRSOR1 INTO @ENTRY_TY,@TRAN_CD,@ITSERIAL,@WARE_NM,@DATE,@IT_CODE,@QTY,@RATE,@PMKEY,@IT_NAME,@DC_NO,@VNAME,@SRATE 
	END
	CLOSE STKVALCRSOR1
	DEALLOCATE STKVALCRSOR1
	
	INSERT INTO ##STKVAL 
	(IT_CODE,IT_NAME,OPBAL,OPAMT,RQTY,RAMT,IQTY,IAMT,CLBAL,CLAMT,VNAME,stkYear,stkMonth,stkMonthNm)		

	SELECT IT_CODE,IT_NAME
	,OPBAL=SUM(CASE WHEN ENTRY_TY='OS' OR DATE<@SDATE THEN (CASE WHEN PMKEY='+' THEN (CASE WHEN DC_NO='DI' THEN 0 ELSE QTY END ) ELSE -QTY END) ELSE 0 	END )
	,OPAMT=SUM(CASE WHEN ENTRY_TY='OS' OR DATE<@SDATE THEN (CASE WHEN PMKEY='+' THEN QTY ELSE -QTY END)*RATE ELSE 0 END )
	,RQTY=SUM(CASE WHEN (ENTRY_TY<>'OS' AND DATE>=@SDATE AND PMKEY='+') THEN (CASE WHEN DC_NO='DI' THEN 0 ELSE QTY END ) ELSE 0 END) 
	,RAMT=SUM(CASE WHEN (ENTRY_TY<>'OS' AND DATE>=@SDATE AND PMKEY='+') THEN QTY*RATE ELSE 0 END)
	,IQTY=SUM(CASE WHEN (ENTRY_TY<>'OS' AND DATE>=@SDATE AND PMKEY='-') THEN QTY ELSE 0 END)
	,IAMT=SUM(CASE WHEN (ENTRY_TY<>'OS' AND DATE>=@SDATE AND PMKEY='-') THEN QTY* SRATE ELSE 0 END)
	,CLBAL=SUM((CASE WHEN PMKEY='+' THEN (CASE WHEN DC_NO='DI' THEN 0 ELSE QTY END ) ELSE -QTY END) )  
	,CLAMT=SUM((CASE WHEN PMKEY='+' THEN QTY ELSE -QTY END)*RATE )
	,VNAME
	,stkYear=CASE WHEN ENTRY_TY='OS' OR DATE<@SDATE then 0 else  YEAR(Date) End
	,stkMonth=CASE WHEN ENTRY_TY='OS' OR DATE<@SDATE then 0 else  Month(Date) End
	,stkMonthNm=CASE WHEN ENTRY_TY='OS' OR DATE<@SDATE then 'Opening Balance' else convert(varchar(3),DATE,107) End
	 FROM  ##STKVALAVG 
	 GROUP BY IT_CODE,IT_NAME,VNAME
	 ,CASE WHEN ENTRY_TY='OS' OR DATE<@SDATE then 0 else  YEAR(Date) End
	 ,CASE WHEN ENTRY_TY='OS' OR DATE<@SDATE then 0 else  Month(Date) End
	 ,CASE WHEN ENTRY_TY='OS' OR DATE<@SDATE then 'Opening Balance' else convert(varchar(3),DATE,107) End	 
	 ORDER BY IT_NAME,VNAME	
		
	DROP TABLE ##STKVALAVG	


If @ShowNil like '%NO%'
BEGIN
	print @EXPARA
	delete from ##STKVAL where clbal=0
END

SELECT A.VNAME,A.IT_CODE,A.IT_NAME,IT.RATEUNIT,IT.[GROUP],IT.TYPE,A.OPBAL,A.OPAMT,A.RQTY,A.RAMT,A.IQTY,A.IAMT,A.CLBAL,A.CLAMT,A.WARE_NM,Status=IsNull(A.STATUS,'') 
	,stkYear,stkMonth,stkMonthNm
	into #STKVAL FROM ##STKVAL A 
	INNER JOIN IT_MAST IT ON  (A.IT_CODE=IT.IT_CODE) order by A.WARE_NM,A.IT_NAME		

If Not Exists(Select VName from ##STKVALConfig Where RecId > 1)
Begin
	Update #STKVAL Set VName = ''
End
DROP TABLE ##STKVAL
DROP TABLE ##STKVAL1
Drop Table ##STKVALConfig

SELECT *
	,RunOpAmt=(Select CLAMT=Isnull(SUM(CLAMT),0) from #STKVAL Where (stkMonth<a.stkMonth and stkYear<=a.stkYear) or (stkMonth=0 and stkYear=0))
	,RunOpQty=(Select CLBAL=Isnull(SUM(CLBAL),0) from #STKVAL Where (stkMonth<a.stkMonth and stkYear<=a.stkYear) or (stkMonth=0 and stkYear=0))
	,RunClAmt=CLAMT+(Select CLAMT=Isnull(SUM(CLAMT),0) from #STKVAL Where stkMonth<a.stkMonth and stkYear<=a.stkYear)
	,RunClQty=CLBAL+(Select CLBAL=Isnull(SUM(CLBAL),0) from #STKVAL Where stkMonth<a.stkMonth and stkYear<=a.stkYear)
	,Sdate=case when stkYear=0 then (select Top 1 Sta_dt from #TempSta_dt) else CONVERT(SmallDatetime,convert(varchar(2),stkMonth)+'/'+'01'+'/'+CONVERT(varchar(4),stkYear)) end
	,Edate=case when stkYear=0 then dateadd(day,-1,@SDATE) else CONVERT(SmallDatetime,convert(varchar(4),stkMonth)+'/'+CONVERT(varchar(2), dbo.funMonthDays(stkMonth,stkYear))+'/'+CONVERT(varchar(4),stkYear)) end
	from #STKVAL a
	order by (case when Vname='' then 'A' else (case when Left(Vname,7)='GENERAL' then 'Y' else (case when Left(Vname,5)='OTHER' then 'Z' else 'D' end) end) end),
			VNAME,IT_NAME,stkYear,stkMonth


