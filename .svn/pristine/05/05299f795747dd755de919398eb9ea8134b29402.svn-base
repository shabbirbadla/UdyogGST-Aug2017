<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAMDAAAAAAAACoDgAAFgAAACgAAAAwAAAAYAAAAAEACAAAAAAAgAoAAAAAAAAAAAAAAAEAAAAA
        AACwrLAAWFhYAP///wB4jHgAkHiQAAAAAAA4rOAAOJzgACh4wAAYSHgAGDRYACic0ABIvPAASKzwADis
        8AAojMAASNDwABhIkAA4jNAAOJzQAChowAA4jOAAGAAYACh4sAAoNFgAOLzwACh40ABIvP8AKEh4ACiM
        0AAoaLAAKFiQABg0aAAYNJAASKzgADis0AAoWLAAOLzgADic8AAYaKAAKGiQAChYeAAYFBgAABQYABhI
        WAAAeNAASJzgAAAAGAAASHgAADRYAChooAAANGgAGHjAACic4ACQ4P8AoOD/ABgkaAAAJEgAGGiwABg0
        eAAANHgAOHjAAKDw/wBY0P8AeOD/ALDw/wAAFEgAAFjAABiMwAAASKAAGFh4ABh4sAAYACgAABQAAMDw
        /wAoSGgAGCR4ABhYkAAoWKAAGFigABhYsAAASJAAAIzgAAAUKAAYSGgAGDRIABgkWABo0P8A8PD/AAAU
        OAAYFEgAACRYAAAkaAAAJHgAAAAoAABosAAYWGgAGBQAAJDw8ACQ8P8A0PD/AODw/wDg//8AGBQ4ABhI
        oAAYFCgAOGigADhYkABIWGgAGBRYABg0oAAASLAAGIzQAChIkAAAJCgASLzgAAB44AAAADgAAIzQABh4
        0AAAaKAAeND/AFjQ8ADg8PAAWODwAGjg8AB44PAAsPDwAEjQ/wBY4P8AADSQAEiMoAAAJDgAKHigABiM
        4AAAWKAAKIzgAABowAAAWJAAGHjgAChYaABYeLAAGCSQACg0aAAoSKAAOIzAAFi88AA40PAASHiwAEh4
        oAA4SGgAsOD/ADh4sAA4eNAASOD/ALD//wDA8PAA0P//AND/8ADg//AA8P//AGjg/wAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        GggURyEFPgcGBQMEAwQDBAI/EBgKGAoYChgKGAoYCgACCBcRKpaVlH42fkB9eX1XfFd8PxAFlwYHBQEF
        BQUFBQIQGwoKCgoKCgoKCgoKCgoCNBQJSAEBAQEAAAAAAAAAAAABAgAFfwcGBQIAAAAABQI/EAwQDCUN
        JQ0GBxMHCxIPCAgJKgEBAQEAAAAAAAAAAAABAgAFSgcmBQIAAAAABQIQGxAbDA0ZDgYmNQcLFR0aCAgJ
        SAEBAQEAAAAAAAAAAAABAgAFSgcjBQIAAAAABQI/EAUFBQUFBQUFBQUFBQUFCAgRKgEBAQEAAAAAAAAA
        AAABAgAFSjUHBQIAAAAABQIQGwIBAQEBAQEBAQEBAQEFDwgJFgEBAQEAAAAAAAAAAAABAgAFnAcGBQIA
        AAAABQIMEAIAAAAAAAAAAAAAAAEFCAgJKgEBAQEAAAAAAAAAAAABAgAFZAsVBQICAgICAQIMDAIAAAAA
        AAAAAAAAAAEFCAgJFgEBAQEAAAAAAAAAAAABAgAFnRITBQMEAwQDBAIMDAIAAAAAAAAAAAAAAAEFPQgR
        YQEBAQEAAAAAAAAAAAABAgAFZAsHBQQDBAMEAwIZDQIAAAAAAAAAAAAAAAEFDxQJFgEBAQEAAAAAAAAA
        AAABAgAFnhILBQMEAwQDBAIMJQIAAAAAAAAAAAAAAAEFPRcJYQEBAQEAAAAAAAAAAAABAgAFZR0VBQQD
        BAMEAwIODQIAAAAAAAAAAAAAAAEFCAgJFgEBAQEAAAAAAAAAAAABAgAFZhIPBQMEAwQDBAINBgIAAAAA
        AAAAAAAAAAEFPQgRBQAAAAAAAAAAAAAAAAABAgAFZQ8dBQQDBAMEAwIGJgIAAAAAAAAAAAAAAAEFDxQJ
        LwAAAAAAAAAAAAAAAAABAgAFnz0PBQUFBQUFBZgiIwICAgICAgICAgICAgIFCBcJSQICAgICAgICAgIC
        AgICAgAFWA8aHRILFQsHBgcGBwYHBwc1FQsVCxIdGg8aCBQJBQEBAQEBAQEBAQEBAQEBAQAFoAgIPQ8S
        CxMTBxMHIwcTBxMHCxILEg+ZDwgXFBcRBQUFBQUFBQUFBQUFBQUFBQUFWGZYZmVKZEE3PjdjNzY2QDZA
        QEB5oVeBV4E/mj+ABQUFBQUFBQUFBQUFBQUFBQUF//+AAAAA///AAAAAAAD//8AAAAAAAP//wAAAAAAA
        ///AAAAAAAD//8AAAAAAAP//wAAAAAAA///AAAAAAAD//8AAAAAAAP//wAAAAAAA///AAAAAAAD//8AA
        AAAAAP//wAAAAAAA///AAAAAAAD//8AAAAAAAP//wAAAAAAA///AAAAAAAD//0AAAAAAAP//AAAAAAAA
        //8AAAAAAAD//wAAAAAAAP//AAAAAAAA//8AAAAAAAD//wAAAAAAAP//AAAAAAAA//8AAAAAAAD//wAA
        AAAAAP//AAAAAAAA//8AAAAAAAD//wAAAAAAAP//AAAAAAAA//8AAAAAAAH//wAAAAAAAf//AAAAAAAB
        //8AAAAAAAH//wAAAAAAAf//AAAAAAAB//8AAAAAAAH//wAAAAAAAf//AAAAAAAB//8AAAAAAAH//wAA
        AAAAAf//AAAAAAAB//8AAAAAAAH//wAAAAAAAf//AAAAAAAB//8AAAAB/////wAAAAH/////
</value>
  </data>
</root>