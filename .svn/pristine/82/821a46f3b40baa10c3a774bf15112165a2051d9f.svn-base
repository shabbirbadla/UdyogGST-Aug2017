IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Usp_Alert_BankReco]') AND type in (N'P', N'PC'))
begin
	DROP PROCEDURE [dbo].[Usp_Alert_BankReco]  
end
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Ramya.
-- Create date: 24/09/2011
-- Description:	Bank Reconciliation for Alert Master.
-- =============================================

CREATE PROCEDURE [dbo].[Usp_Alert_BankReco]
	@CommanPara VARCHAR(1000)
AS
DECLARE @CLAUSEBP VARCHAR(50),@CLAUSEBR VARCHAR(50),@_MOPBAL NUMERIC(12,2),@CNT NUMERIC(10),
@SQLCOMMAND NVARCHAR(4000),@Fcond_Alert AS NVARCHAR(2000)

EXECUTE [Usp_Rep_FiltCond_Alert]
@CommanPara
,@VMAINFILE='A',@VITFILE='A',@VACFILE=' '
,@It_Mast= '',@Ac_Mast= 'a'
,@vFcond_Alert =@Fcond_Alert OUTPUT
print '@Fcond_Alert rr'+@Fcond_Alert

if isnull(@Fcond_Alert,'')=''
begin
	set @Fcond_Alert=' WHERE 1=1 '
end

DELETE FROM ALERT_BANKRECO

SELECT	@_MOPBAL=SUM(CASE WHEN ENTRY_TY='OB' AND DATE<='' THEN DEBIT-CREDIT ELSE 0 END)
	FROM BANKRECO WHERE DATE<=getdate() AND AC_NAME = @CommanPara 

SELECT @CLAUSEBP=CLAUSE FROM L_CLAUSE WHERE RTRIM(LTRIM(CLAUSEDEFA)) = 'BP'
SELECT @CLAUSEBR=CLAUSE FROM L_CLAUSE WHERE RTRIM(LTRIM(CLAUSEDEFA)) = 'BR'


SET @CLAUSEBP=CASE WHEN @CLAUSEBP IS NULL THEN '' ELSE @CLAUSEBP END
SET @CLAUSEBR=CASE WHEN @CLAUSEBR IS NULL THEN '' ELSE @CLAUSEBR END

SELECT AC_NAME,ENTRY_TY,DATE,INV_NO,CHEQ_NO,PARTY_NM,DEBIT,CREDIT,DOC_NO,TRAN_CD,DB,AMT_TY
,CLAUSE=SPACE(70),AMTTYPE='aa'
INTO #TMPBANKRECO
FROM BANKRECO a where 1=2


SET @SQLCOMMAND='INSERT INTO #TMPBANKRECO SELECT AC_NAME,ENTRY_TY,DATE,INV_NO,CHEQ_NO,PARTY_NM,DEBIT,CREDIT,DOC_NO,TRAN_CD,DB,AMT_TY,'
SET @SQLCOMMAND=@SQLCOMMAND+' '+'CLAUSE=(CASE WHEN (CLAUSE='''' OR CLAUSE IS NULL) AND (CL_DATE > '+CHAR(39)+CAST(getdate() AS VARCHAR)+CHAR(39)+' OR CL_DATE='''' OR CL_DATE IS NULL) THEN (CASE WHEN ENTRY_TY=''BR'' THEN (CASE WHEN '+char(39)+@CLAUSEBR+char(39)+'='''' THEN ''Cheque Deposited But Not Cleared'' ELSE '+char(39)+@CLAUSEBR+char(39)+' END) ELSE (CASE WHEN ENTRY_TY=''BP'' THEN (CASE WHEN '+char(39)+@CLAUSEBP+char(39)+'='''' THEN ''Cheque Issued But Not Cleared'' ELSE '+char(39)+@CLAUSEBP+char(39)+' END) ELSE '''' END) END) ELSE CLAUSE END),'
SET @SQLCOMMAND=@SQLCOMMAND+' '+'AMTTYPE=(CASE WHEN AMT_TY=''CR'' THEN ''A'' ELSE ''B'' END)' 
SET @SQLCOMMAND=@SQLCOMMAND+' '+'FROM BANKRECO a' 
SET @SQLCOMMAND=@SQLCOMMAND+' '+@Fcond_Alert
SET @SQLCOMMAND=@SQLCOMMAND+' '+' and ENTRY_TY<>''OB''  AND (CL_DATE > '+CHAR(39)+CAST(getdate() AS VARCHAR)+CHAR(39)+' OR CL_DATE='''' OR CL_DATE IS NULL) AND DATE<='+CHAR(39)+CAST(getdate() AS VARCHAR)+CHAR(39)
SET @SQLCOMMAND=@SQLCOMMAND+' '+'UNION ALL'
SET @SQLCOMMAND=@SQLCOMMAND+' '+'SELECT	AC_NAME,ENTRY_TY, DATE, INV_NO=SPACE(10), CHEQ_NO, PARTY_NM=SUBSTRING(OAC_NAME,1,50), '
SET @SQLCOMMAND=@SQLCOMMAND+' '+'DEBIT=(CASE WHEN AMT_TY=''DR'' THEN AMOUNT ELSE 0 END),CREDIT=(CASE WHEN AMT_TY=''CR'' THEN AMOUNT ELSE 0 END),'
SET @SQLCOMMAND=@SQLCOMMAND+' '+'DOC_NO, TRAN_CD, DB=''RE'', AMT_TY,' 
SET @SQLCOMMAND=@SQLCOMMAND+' '+'CLAUSE=(CASE WHEN (CLAUSE='''' OR CLAUSE IS NULL) AND (CL_DATE > '+CHAR(39)+CAST(getdate() AS VARCHAR)+CHAR(39)+' OR CL_DATE='''' OR CL_DATE IS NULL) THEN (CASE WHEN ENTRY_TY=''BR'' THEN (CASE WHEN '+char(39)+@CLAUSEBR+char(39)+'='''' THEN ''Cheque Deposited But Not Cleared'' ELSE '+char(39)+@CLAUSEBR+char(39)+' END) ELSE (CASE WHEN ENTRY_TY=''BP'' THEN (CASE WHEN '+char(39)+@CLAUSEBP+char(39)+'='''' THEN ''Cheque Issued But Not Cleared'' ELSE '+char(39)+@CLAUSEBP+char(39)+' END) ELSE '''' END) END) ELSE CLAUSE END),'
SET @SQLCOMMAND=@SQLCOMMAND+' '+'AMTTYPE=(CASE WHEN AMT_TY=''CR'' THEN ''A'' ELSE ''B'' END)'
SET @SQLCOMMAND=@SQLCOMMAND+' '+'FROM RECOSTAT a '
SET @SQLCOMMAND=@SQLCOMMAND+' '+@Fcond_Alert
SET @SQLCOMMAND=@SQLCOMMAND+' '+'AND ENTRY_TY<>''OB'' AND (CL_DATE > '+CHAR(39)+CAST(getdate() AS VARCHAR)+CHAR(39)+' OR CL_DATE='''' OR CL_DATE IS NULL) AND DATE<='+CHAR(39)+CAST(getdate() AS VARCHAR)+CHAR(39)
SET @SQLCOMMAND=@SQLCOMMAND+' '+'ORDER BY 14,13,3'
PRINT @SQLCOMMAND 
EXECUTE SP_EXECUTESQL @SQLCOMMAND

	INSERT INTO ALERT_BANKRECO
	SELECT AC_NAME,l.code_nm,DATE,INV_NO,CHEQ_NO,PARTY_NM,(DEBIT+CREDIT) AS AMOUNT,CLAUSE FROM #TMPBANKRECO a inner join lcode l on (a.entry_ty=l.entry_ty)

DROP TABLE #TMPBANKRECO

SELECT [Bank Name],[Type],Date,[Doc No],[Chq No],[Party Name],[Amount],[Clause] from ALERT_BANKRECO


