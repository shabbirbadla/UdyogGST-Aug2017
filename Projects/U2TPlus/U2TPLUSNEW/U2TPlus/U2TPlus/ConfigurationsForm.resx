<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAMDAAAAAAAACoDgAAFgAAACgAAAAwAAAAYAAAAAEACAAAAAAAgAoAAAAAAAAAAAAAAAEAAAAA
        AAAAAAAAsKywAP///wDw8PAASCQ4ACj/AADw8OAAOCQoAFg0OABoNEgAaEhIAODg4AAYFHgAGGj/AHhI
        WADQ0NAAWEhIAEg0OACgnKAAkIyQAODg0ABINCgAWDRIABh4/wCwjJAAKBQoALCsoABYWFgAeFhYAPD/
        4ABYWEgAABR4AP/w8AAoFBgA0ODQAODQ0ACQnJAAoIygAFgkOAAYJJAAeEhIAPDg4AA4JDgAGBQYAODw
        4AB4jHgAoKygAKCckACgjJAAaFhYAMDQ/wAYJKAAwLzAALCcoADA0MAASEhIAJBIWADQ0MAAGBQAAJB4
        eABoSFgAeHh4AGhIOAB4WEgA0LzAALCcsAB4aGgAkHiQAEgkKABoaGgAGAAYAHg0WAAYFKAAsND/AMDg
        /wDAnLAA4NDgAJCMeAAYAHgAwJygADgUKABoWEgA8ODwALC8sADAvLAAeHhoACgkKAAoJBgASDRIAMCs
        wAA4NCgA0LzQAGhYaABYJEgA4PDQAAAkkADArLAAoHiQAJBoeAAoABgAeDRIAGh4aABISDgAeGh4AJBo
        aACgaHgAkHhoAKB4eACQjKAAaDQ4AEhYSACQWFgAkFhoAFhIOADQ4MAA//D/APD/8AAAFAAAADSwALCM
        oAB4WGgAWEhYABgksAA4NDgAkEhoAFhoWACwvMAA8P//AP//8AB4eJAAAAAYAAB4/wCQnKAAoJywAGho
        WADg4PAA4NDAAFg0WADQvLAAaGh4ADhIOAAoJDgASEhYADgkGAAYFCgAaDRYAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AgICAgICAgICAgICAgICAgICAgICAgJMAAAAAAAAAAAAAAAD//8AAAAAAAP//wAAAAAAA///AAAAAAAD
        //8AAAAAAAP//wAAAAAAA///AAAAAAAD//8AAAAAAAP//wAAAAAAA///gAAAAAAH///AAAAAAA///+AA
        AAAAH///8AAAAAA////4AAAAAH/////4AAH/////wAAAAAAP///AAAAAAA///8AAAAAAD///wAAAAAAP
        ///AAAAAAA///8AAAAAAD///wAAAAAAP///AAAAAAA///8AAAAAAD///wAAAAAAP///AAAAAAA///8AA
        AAAAD///wAAAAAAP///AAAAAAA///8AAAAAAD///wAAAAAAP///AAAAAAA///8AAAAAAD///wAAAAAAP
        ///AAAAAAA///8AAAAAAD///wAAAAAAP///AAAAAAAf//8AAAAAAA///wAAAAAAB///AAAAAAAH//8AA
        AAAAAf//wAAAAAAB///AAAAAAAP//8AAAAAAB///wAAAAAAP///AAAAAAA///+AAAAAAP///
</value>
  </data>
</root>